/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package zils_prova.telas;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import zils_prova.DAO.AgendamentoDAO;
import zils_prova.DAO.MotoristaDAO;
import zils_prova.DAO.VeiculoDAO;
import zils_prova.model.Agendamento;
import zils_prova.model.DateUtil;
import zils_prova.model.Motorista;
import zils_prova.model.Veiculo;

/**
 *
 * @author eduar
 */
public class AdicionaAgendamento extends javax.swing.JDialog {

    AgendamentoDAO agendamentoDAO = new AgendamentoDAO();
    VeiculoDAO veiculoDAO = new VeiculoDAO();
    MotoristaDAO motoristaDAO = new MotoristaDAO();

    /**
     * Creates new form AdicionaAgendamento
     */
    public AdicionaAgendamento(java.awt.Frame parent, boolean modal) throws SQLException {
        super(parent, modal);
        initComponents();
        carregaTable(agendamentoDAO.getAll());
        carregaCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbMotorista = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cbVeiculo = new javax.swing.JComboBox<>();
        btVoltar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        tfOrigem = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        tfDestino = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tfDt_saida = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        tfDt_retorno = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        tfNpassageiros = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taObservacao = new javax.swing.JTextArea();
        btAdicionar = new javax.swing.JButton();
        btRemover = new javax.swing.JButton();
        btAlterar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Motorista", "Origem", "Destino", "Saída", "Retorno"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabela);

        jLabel1.setText("Agendamentos");

        jLabel4.setText("Codigo do Agendamento #");

        jLabel5.setText("Novo Agendamento");

        jLabel2.setText("Motorista");

        cbMotorista.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Veiculo");

        cbVeiculo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btVoltar.setText("↩");
        btVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltarActionPerformed(evt);
            }
        });

        jLabel6.setText("Origem");

        jLabel7.setText("Destino");

        jLabel8.setText("Data Saída");

        try {
            tfDt_saida.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel9.setText("Data Retorno");

        try {
            tfDt_retorno.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel10.setText("Numero Passageiros");

        try {
            tfNpassageiros.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel11.setText("Observações sobre a viagem");

        taObservacao.setColumns(20);
        taObservacao.setLineWrap(true);
        taObservacao.setRows(10);
        jScrollPane2.setViewportView(taObservacao);

        btAdicionar.setText("Adicionar");
        btAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdicionarActionPerformed(evt);
            }
        });

        btRemover.setText("Remover");
        btRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoverActionPerformed(evt);
            }
        });

        btAlterar.setText("Alterar");
        btAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(btVoltar))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel11))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(cbMotorista, 0, 317, Short.MAX_VALUE)
                                                .addComponent(tfOrigem))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(tfDt_saida, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tfDt_retorno, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel3)
                                                    .addComponent(jLabel7))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cbVeiculo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(tfDestino)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tfNpassageiros, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 224, Short.MAX_VALUE))))))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btAlterar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btRemover)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAdicionar)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cbVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tfOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(tfDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tfDt_saida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(tfDt_retorno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(tfNpassageiros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAdicionar)
                    .addComponent(btRemover)
                    .addComponent(btAlterar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btVoltar)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltarActionPerformed
        this.dispose();
        Menu dialog = null;
        dialog = new Menu(new javax.swing.JFrame(), true);
        dialog.setVisible(true);
    }//GEN-LAST:event_btVoltarActionPerformed

    private void btAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarActionPerformed
        try {
            Alterar();        // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(AdicionaAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btAlterarActionPerformed

    private void btRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoverActionPerformed
        try {
            Remover();// TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(AdicionaAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btRemoverActionPerformed

    private void btAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdicionarActionPerformed
        try {
            Adicionar();        // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(AdicionaAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btAdicionarActionPerformed

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        verificaCampos();        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseMoved

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked

    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void tabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMouseClicked
        Agendamento f = new Agendamento();
        try {
            f = agendamentoDAO.getById((int) tabela.getValueAt(tabela.getSelectedRow(), 0));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Favor Selecionar um item da tabela");
            ex.printStackTrace();
        }
        tfDestino.setText(String.valueOf(f.getDs_destino()));
        tfDt_retorno.setText(String.valueOf(f.getDt_retorno()));
        tfDt_saida.setText(String.valueOf(f.getDt_saida()));
        tfNpassageiros.setText(String.valueOf(f.getNr_passageiros()));
        tfOrigem.setText(String.valueOf(f.getDs_origem()));
        taObservacao.setText(String.valueOf(f.getDs_observacao()));        // TODO add your handling code here:
    }//GEN-LAST:event_tabelaMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdicionaAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdicionaAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdicionaAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdicionaAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AdicionaAgendamento dialog = null;
                try {
                    dialog = new AdicionaAgendamento(new javax.swing.JFrame(), true);
                } catch (SQLException ex) {
                    Logger.getLogger(AdicionaAgendamento.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdicionar;
    private javax.swing.JButton btAlterar;
    private javax.swing.JButton btRemover;
    private javax.swing.JButton btVoltar;
    private javax.swing.JComboBox<String> cbMotorista;
    private javax.swing.JComboBox<String> cbVeiculo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea taObservacao;
    private javax.swing.JTable tabela;
    private javax.swing.JTextField tfDestino;
    private javax.swing.JFormattedTextField tfDt_retorno;
    private javax.swing.JFormattedTextField tfDt_saida;
    private javax.swing.JFormattedTextField tfNpassageiros;
    private javax.swing.JTextField tfOrigem;
    // End of variables declaration//GEN-END:variables
    private void Adicionar() throws SQLException {

        if (tfDestino.getText().trim().length() > 0 && tfDt_retorno.getText().trim().length() > 0 && tfDt_saida.getText().trim().length() > 0 && tfOrigem.getText().trim().length() > 0 && tfNpassageiros.getText().trim().length() > 0) {
            Agendamento v = new Agendamento();
            Motorista motorista = new Motorista();
            Veiculo veiculo = new Veiculo();

            motorista = (Motorista) cbMotorista.getSelectedItem();
            veiculo = (Veiculo) cbVeiculo.getSelectedItem();

            v.setCd_agendamento(agendamentoDAO.getLastId());
            v.setCd_funcionario(motorista.getFuncionario().getCodigo());
            v.setCd_motorista(motorista.getCodigo());
            v.setCd_veiculo(veiculo.getCodigo());
            v.setDs_destino(tfDestino.getText());
            v.setDs_observacao(taObservacao.getText());
            v.setDs_origem(tfOrigem.getText());
            v.setDt_retorno(DateUtil.stringToDate(tfDt_retorno.getText()));
            v.setDt_saida(DateUtil.stringToDate(tfDt_saida.getText()));
            v.setNr_passageiros(Integer.parseInt(tfNpassageiros.getText()));
            v.setVeiculo(veiculo);
            v.setMotorista(motorista);

            Date dataAtual = new Date();
            Date dataVenc = v.getMotorista().getDt_vencimento();
            if (DateUtil.stringToDate(tfDt_saida.getText()).after(DateUtil.stringToDate(tfDt_retorno.getText()))) {
                JOptionPane.showMessageDialog(null, "Você não pode voltar no tempo, verifique a Data de saida e de volta :)");
                System.out.println(DateUtil.stringToDate(tfDt_saida.getText()) + " <-- Saída\n" + DateUtil.stringToDate(tfDt_retorno.getText()) + " <-- Retorno\n");
                return;
            }
            if (dataAtual.after(dataVenc)) {
                JOptionPane.showMessageDialog(null, "A CNH do motorista selecionado expirou, impossivel efetuar o Agendamento");
                return;
            } else if (v.getVeiculo().getNr_passageiros() < v.getNr_passageiros()) {
                System.out.println(v.getVeiculo().getNr_passageiros() + "    <    " + v.getNr_passageiros());
                JOptionPane.showMessageDialog(null, "O numero de pessoas informadas no agendamento é superior ao disponivel no veiculo selecionado");
                return;
            } else {
                System.out.println("AGENDAMENTO EFETUADO");
                agendamentoDAO.save(v);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Favor preencher devidamente todos os campos");
        }
        carregaTable(agendamentoDAO.getAll());
    }

    private void Alterar() throws SQLException {
        Agendamento f = new Agendamento() {
        };
        try {
            f = agendamentoDAO.getById((int) tabela.getValueAt(tabela.getSelectedRow(), 0));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Favor Selecionar um item da tabela");
            ex.printStackTrace();
        }
        Motorista motorista = new Motorista();
        Veiculo veiculo = new Veiculo();

        motorista = (Motorista) cbMotorista.getSelectedItem();
        veiculo = (Veiculo) cbVeiculo.getSelectedItem();

        f.setCd_agendamento(((int) tabela.getValueAt(tabela.getSelectedRow(), 0)));
        f.setCd_funcionario(motorista.getFuncionario().getCodigo());
        f.setCd_motorista(motorista.getCodigo());
        f.setCd_veiculo(veiculo.getCodigo());
        f.setDs_destino(tfDestino.getText());
        f.setDs_observacao(taObservacao.getText());
        f.setDs_origem(tfOrigem.getText());
        f.setDt_retorno(DateUtil.stringToDate(tfDt_retorno.getText()));
        f.setDt_saida(DateUtil.stringToDate(tfDt_saida.getText()));
        f.setVeiculo(veiculo);
        f.setMotorista(motorista);

        Date dataAtual = new Date();
        Date dataVenc = f.getMotorista().getDt_vencimento();
        if (DateUtil.stringToDate(tfDt_saida.getText()).after(DateUtil.stringToDate(tfDt_retorno.getText()))) {
            JOptionPane.showMessageDialog(null, "Você não pode voltar no tempo, verifique a Data de saida e de volta :)");
            System.out.println(DateUtil.stringToDate(tfDt_saida.getText()) + " <-- Saída\n" + DateUtil.stringToDate(tfDt_retorno.getText()) + " <-- Retorno\n");
            return;
        }
        if (dataAtual.after(dataVenc)) {
            JOptionPane.showMessageDialog(null, "A CNH do motorista selecionado expirou, impossivel efetuar o Agendamento");
            return;
        } else if (f.getVeiculo().getNr_passageiros() < f.getNr_passageiros()) {
            System.out.println(f.getVeiculo().getNr_passageiros() + "    <    " + f.getNr_passageiros());
            JOptionPane.showMessageDialog(null, "O numero de pessoas informadas no agendamento é superior ao disponivel no veiculo selecionado");
            return;
        } else {
            System.out.println("AGENDAMENTO EFETUADO");

            agendamentoDAO.update(f);
        }

        carregaTable(agendamentoDAO.getAll());
        limpaCampos();
    }

    private void Remover() throws SQLException {
        int codigoRemover = (int) tabela.getValueAt(tabela.getSelectedRow(), 0);
        try {
            agendamentoDAO.delete(codigoRemover);
            carregaTable(agendamentoDAO.getAll());
            JOptionPane.showMessageDialog(null, "Registro Removido Com Sucesso!!!");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        carregaTable(agendamentoDAO.getAll());
        limpaCampos();
    }

    private void carregaTable(List<Agendamento> all) throws SQLException {
        if (all == null) {
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        model.setRowCount(0);
        for (Agendamento f : all) {
            model.addRow(new Object[]{
                f.getCd_agendamento(),
                f.getMotorista().getFuncionario().getNm_funcionario(),
                f.getDs_origem(),
                f.getDs_destino(),
                f.getDt_saida(),
                f.getDt_retorno()});
        }
        UltimoID();
    }

    private void UltimoID() throws SQLException {
        jLabel4.setText("Codigo do Agendamento #" + agendamentoDAO.getLastId());
    }

    private void limpaCampos() {
        tfDestino.setText("");
        tfDt_retorno.setText("");
        tfDt_saida.setText("");
        tfNpassageiros.setText("");
        tfOrigem.setText("");
    }

    private void carregaCombo() throws SQLException {
        List<Motorista> listaMotoristas = new ArrayList<Motorista>();
        for (Motorista f : motoristaDAO.getAll()) {
            listaMotoristas.add(f);
        }
        DefaultComboBoxModel modelo = new DefaultComboBoxModel(listaMotoristas.toArray());
        cbMotorista.setModel(modelo);
        List<Veiculo> listaVeiculos = new ArrayList<Veiculo>();
        for (Veiculo v : veiculoDAO.getAll()) {
            listaVeiculos.add(v);
        }
        DefaultComboBoxModel modelo1 = new DefaultComboBoxModel(listaVeiculos.toArray());
        cbVeiculo.setModel(modelo1);
    }

    private void verificaCampos() {
        if (tfDestino.getText().trim().length() > 0 && tfDt_retorno.getText().trim().length() > 0 && tfDt_saida.getText().trim().length() > 0 && tfOrigem.getText().trim().length() > 0 && tfNpassageiros.getText().trim().length() > 0) {
            btAdicionar.setEnabled(true);
        } else {
            btAdicionar.setEnabled(false);
        }
        if (tabela.getSelectedRow() < 0) {
            btAlterar.setEnabled(false);
            btRemover.setEnabled(false);
        } else {
            btAlterar.setEnabled(true);
            btRemover.setEnabled(true);
        }

    }
}
